// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package resource

import (
	"context"
	"github.com/diegobernardes/flare/internal"
	"sync"
)

var (
	lockserviceRepositoryMockCreate   sync.RWMutex
	lockserviceRepositoryMockDelete   sync.RWMutex
	lockserviceRepositoryMockFind     sync.RWMutex
	lockserviceRepositoryMockFindByID sync.RWMutex
)

// serviceRepositoryMock is a mock implementation of serviceRepository.
//
//     func TestSomethingThatUsesserviceRepository(t *testing.T) {
//
//         // make and configure a mocked serviceRepository
//         mockedserviceRepository := &serviceRepositoryMock{
//             CreateFunc: func(ctx context.Context, resource internal.Resource) (string, error) {
// 	               panic("TODO: mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, resourceID string) error {
// 	               panic("TODO: mock out the Delete method")
//             },
//             FindFunc: func(ctx context.Context, pagination internal.Pagination) ([]internal.Resource, internal.Pagination, error) {
// 	               panic("TODO: mock out the Find method")
//             },
//             FindByIDFunc: func(ctx context.Context, resourceID string) (*internal.Resource, error) {
// 	               panic("TODO: mock out the FindByID method")
//             },
//         }
//
//         // TODO: use mockedserviceRepository in code that requires serviceRepository
//         //       and then make assertions.
//
//     }
type serviceRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, resource internal.Resource) (string, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, resourceID string) error

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, pagination internal.Pagination) ([]internal.Resource, internal.Pagination, error)

	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, resourceID string) (*internal.Resource, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource internal.Resource
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceID is the resourceID argument value.
			ResourceID string
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Pagination is the pagination argument value.
			Pagination internal.Pagination
		}
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceID is the resourceID argument value.
			ResourceID string
		}
	}
}

// Create calls CreateFunc.
func (mock *serviceRepositoryMock) Create(ctx context.Context, resource internal.Resource) (string, error) {
	if mock.CreateFunc == nil {
		panic("serviceRepositoryMock.CreateFunc: method is nil but serviceRepository.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource internal.Resource
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	lockserviceRepositoryMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockserviceRepositoryMockCreate.Unlock()
	return mock.CreateFunc(ctx, resource)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedserviceRepository.CreateCalls())
func (mock *serviceRepositoryMock) CreateCalls() []struct {
	Ctx      context.Context
	Resource internal.Resource
} {
	var calls []struct {
		Ctx      context.Context
		Resource internal.Resource
	}
	lockserviceRepositoryMockCreate.RLock()
	calls = mock.calls.Create
	lockserviceRepositoryMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *serviceRepositoryMock) Delete(ctx context.Context, resourceID string) error {
	if mock.DeleteFunc == nil {
		panic("serviceRepositoryMock.DeleteFunc: method is nil but serviceRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ResourceID string
	}{
		Ctx:        ctx,
		ResourceID: resourceID,
	}
	lockserviceRepositoryMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockserviceRepositoryMockDelete.Unlock()
	return mock.DeleteFunc(ctx, resourceID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedserviceRepository.DeleteCalls())
func (mock *serviceRepositoryMock) DeleteCalls() []struct {
	Ctx        context.Context
	ResourceID string
} {
	var calls []struct {
		Ctx        context.Context
		ResourceID string
	}
	lockserviceRepositoryMockDelete.RLock()
	calls = mock.calls.Delete
	lockserviceRepositoryMockDelete.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *serviceRepositoryMock) Find(ctx context.Context, pagination internal.Pagination) ([]internal.Resource, internal.Pagination, error) {
	if mock.FindFunc == nil {
		panic("serviceRepositoryMock.FindFunc: method is nil but serviceRepository.Find was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Pagination internal.Pagination
	}{
		Ctx:        ctx,
		Pagination: pagination,
	}
	lockserviceRepositoryMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockserviceRepositoryMockFind.Unlock()
	return mock.FindFunc(ctx, pagination)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedserviceRepository.FindCalls())
func (mock *serviceRepositoryMock) FindCalls() []struct {
	Ctx        context.Context
	Pagination internal.Pagination
} {
	var calls []struct {
		Ctx        context.Context
		Pagination internal.Pagination
	}
	lockserviceRepositoryMockFind.RLock()
	calls = mock.calls.Find
	lockserviceRepositoryMockFind.RUnlock()
	return calls
}

// FindByID calls FindByIDFunc.
func (mock *serviceRepositoryMock) FindByID(ctx context.Context, resourceID string) (*internal.Resource, error) {
	if mock.FindByIDFunc == nil {
		panic("serviceRepositoryMock.FindByIDFunc: method is nil but serviceRepository.FindByID was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ResourceID string
	}{
		Ctx:        ctx,
		ResourceID: resourceID,
	}
	lockserviceRepositoryMockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	lockserviceRepositoryMockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, resourceID)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//     len(mockedserviceRepository.FindByIDCalls())
func (mock *serviceRepositoryMock) FindByIDCalls() []struct {
	Ctx        context.Context
	ResourceID string
} {
	var calls []struct {
		Ctx        context.Context
		ResourceID string
	}
	lockserviceRepositoryMockFindByID.RLock()
	calls = mock.calls.FindByID
	lockserviceRepositoryMockFindByID.RUnlock()
	return calls
}
