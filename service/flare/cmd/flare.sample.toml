# --------------------------------------------------------------------------------------------------
#   More about this configuration at: https://github.com/diegobernardes/flare/wiki/Configuration   #
# --------------------------------------------------------------------------------------------------
# - log.level
#   Control the minimum log level from messages to be displayed.
#   Possible values: "debug", "info", "warn" and "error".
#
# - log.output
#   Where the logs gonna be sent.
#   Possible values: "stdout" and "discard".
#
# - log.format
#   Format of the outputed log.
#   Possible values: "human" and "json".
#
[log]
level  = "debug"
output = "stdout"
format = "human"

[http]
  # ------------------------------------------------------------------------------------------------
  # - http.server.addr
  #   Where the HTTP server gonna listen. The value should have this format: "host:port". The host
  #   can be omited, in this case, Flare gonna bind to all available interfaces. The port is always
  #   required.
  #
  # - http.server.timeout
  #   The max time a request has to be processed.
  #
  # - http.server.enable
  #   Used to enable or disable the HTTP server.
  #   Possible values: true or false.
  #
  [http.server]
  enable  = true
  addr    = ":8080"
  timeout = "5s"

  # ------------------------------------------------------------------------------------------------
  # - http.client.max-idle-connections
  #   The quantity of idle connections that are kept open.
  #
  # - http.client.max-idle-connections-per-host
  #   The quantity of idle connections per host that are kept open.
  #
  # - http.client.idle-connections-timeout
  #   The time to live of a idle connection inside the pool of idle connections. If a connection is
  #   used, this time resets.
  #
  [http.client]
  max-idle-connections          = 1000
  max-idle-connections-per-host = 100
  idle-connection-timeout       = "60s"

# --------------------------------------------------------------------------------------------------
# - domain.default-limit
#   The quantity of entities to be returned by default on collections.
#
[domain]
default-limit = 30

# --------------------------------------------------------------------------------------------------
# - worker.enable
#   Used to enable or disable the worker.
#   Possible values: true or false.
#
# - worker.{name}.timeout
#   The time a given message has to be processed.
#
# - worker.{name}.concurrency
#   The quantity of goroutines to process the message queue.
#
# - worker.{name}.concurrency-output
#   After the worker finish the process it need to send the output to another worker. This value
#   control the quantity of goroutines delivering the output.
#
[worker]
enable = true

  [worker.producer.spread]
  timeout            = "10s"
  concurrency        = 100
  concurrency-output = 100

  [worker.producer.delivery]
  timeout     = "10s"
  concurrency = 1000

[node]
  # ------------------------------------------------------------------------------------------------
  # - node.master.eligible
  #   Flag used to mark the nodes that can be elibible to be a master.
  #
  # - node.master.exclusive
  #   Flag used to mark the nodes as exclusive master. In case if assume the master position, it
  #   stop processing and act only as a coordinator node.
  #
  # - node.master.election
  #   Control the time interval a election occur.
  #
  # - node.master.election-keep-alive
  #   Control the time interval a master gonna send a keep alive to remain as master.
  #
  [node.master]
  eligible            = true
  exclusive           = false
  election            = "1m"
  election-keep-alive = "30s"

  # ------------------------------------------------------------------------------------------------
  # - node.worker.register
  #   Control the time interval to send a keep alive to remain into the cluster.
  #
  [node.worker]
  register            = "1m"
  register-keep-alive = "30s"

# --------------------------------------------------------------------------------------------------
# - provider.repository
#   The content location.
#   Possible values: "cassandra".
#
# - provider.queue
#   The messages location.
#   Posssible values: "aws.sqs".
#
[provider]
repository = "cassandra"
queue      = "aws.sqs"

  # ------------------------------------------------------------------------------------------------
  # - provider.aws.key
  #   Key to connect to AWS.
  #
  # - provider.aws.secret
  #   Secret to connect to AWS.
  #
  # - provider.aws.region
  #   Region to connect to AWS.
  #
  # - provider.aws.sqs.{name}.queue
  #   The SQS queue the messages gonna be delivered/consumed.
  #
  # - provider.aws.sqs.{name}.ingress.timeout
  #   The max quantity of time to wait during a request to send the messages to SQS.
  #
  # - provider.aws.sqs.{name}.egress.receive-wait-time
  #   The quantity of time to wait a new message be ready to be delived.
  #
  [provider.aws]
  key    = ""
  secret = ""
  region = ""

    [provider.aws.sqs.producer.spread]
    queue = "flare-producer-spread"

      [provider.aws.sqs.producer.spread.ingress]
      timeout = "1s"

      [provider.aws.sqs.producer.spread.egress]
      receive-wait-time = "20s"

    [provider.aws.sqs.producer.delivery]
    queue = "flare-producer-delivery"

      [provider.aws.sqs.producer.delivery.ingress]
      timeout = "1s"

      [provider.aws.sqs.producer.delivery.egress]
      receive-wait-time = "20s"

  [provider.cassandra]
  hosts    = ["127.0.0.1"]
  port     = 9042
  timeout  = "1000ms"
  keyspace = "flare"